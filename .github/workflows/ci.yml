name: CI

# On every pull request, but only on push to main
on:
  push:
    branches:
    - main
    tags:
    - '*'
    paths:
      # Only run test and docker publish if some code have changed
      - 'setup.py'
      - 'setup.cfg'
      - 'src/titiler/**'
      - '.pre-commit-config.yaml'
      - '.github/codecov.yml'
      - 'dockerfiles/**'
  pull_request:
  workflow_dispatch:

env:
  LATEST_PY_VERSION: '3.12'

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Test titiler.core
        run: |
          python -m pip install -e src/titiler/core["test"]
          python -m pytest src/titiler/core --cov=titiler.core --cov-report=xml --cov-append --cov-report=term-missing

      - name: Test titiler.extensions
        run: |
          python -m pip install -e src/titiler/extensions["test,cogeo,stac"]
          python -m pytest src/titiler/extensions --cov=titiler.extensions --cov-report=xml --cov-append --cov-report=term-missing

      - name: Test titiler.mosaic
        run: |
          python -m pip install -e src/titiler/mosaic["test"]
          python -m pytest src/titiler/mosaic --cov=titiler.mosaic --cov-report=xml --cov-append --cov-report=term-missing

      - name: Test titiler.application
        run: |
          python -m pip install -e src/titiler/application["test"]
          python -m pytest src/titiler/application --cov=titiler.application --cov-report=xml --cov-append --cov-report=term-missing

      - name: run pre-commit
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
        run: |
          python -m pip install pre-commit
          pre-commit run --all-files

      - name: Upload Results
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: ${{ matrix.python-version }}
          fail_ci_if_error: false

  publish:
    needs: [tests]
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine build hatch

      - name: Set tag version
        id: tag
        # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Set module version
        id: module
        # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
        run: echo ::set-output name=version::$(hatch --quiet version)

      - name: Build and publish titiler packages
        if: steps.tag.outputs.tag == steps.module.outputs.version
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          scripts/publish

  publish-docker:
    needs: [tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.repository == 'developmentseed/titiler'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (unicorn)
        id: meta-uvicorn
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}-uvicorn
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker meta (gunicorn)
        id: meta-gunicorn
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      # Uvicorn
      - name: Build and push uvicorn
        uses: docker/build-push-action@v6
        with:
          # TODO: add `linux/arm64 once https://github.com/rasterio/rasterio-wheels/issues/69 is resolved
          platforms: linux/amd64 # ,linux/arm64
          context: .
          file: dockerfiles/Dockerfile.uvicorn
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-uvicorn.outputs.tags }}
          labels: ${{ steps.meta-uvicorn.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Gunicorn
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          # TODO: add `linux/arm64 once https://github.com/rasterio/rasterio-wheels/issues/69 is resolved
          platforms: linux/amd64 # ,linux/arm64
          context: .
          file: dockerfiles/Dockerfile.gunicorn
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-gunicorn.outputs.tags }}
          labels: ${{ steps.meta-gunicorn.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [tests, publish]
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release' && github.repository == 'developmentseed/titiler'

    defaults:
      run:
        working-directory: deployment/aws

    steps:
      - uses: actions/checkout@v4

      # Let's wait a bit to make sure Pypi is up to date
      - name: Sleep for 120 seconds
        run: sleep 120s
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14.x'

      - name: Install cdk
        run: npm install -g

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-cdk.txt

      # Let's wait a bit to make sure package is available on pypi
      - name: Sleep for 120 seconds
        run: sleep 120s
        shell: bash

      # Build and Deploy CDK application
      - name: Build & Deploy
        run: npm run cdk -- deploy ${{ secrets.STACK_NAME }}-lambda-${{ secrets.STACK_STAGE }} --require-approval never
        env:
          TITILER_STACK_NAME: ${{ secrets.STACK_NAME }}
          TITILER_STACK_STAGE: ${{ secrets.STACK_STAGE }}
          TITILER_STACK_MEMORY: ${{ secrets.STACK_MEMORY }}
          TITILER_STACK_OWNER: ${{ secrets.STACK_OWNER }}
          TITILER_STACK_CLIENT: ${{ secrets.STACK_CLIENT }}
          TITILER_STACK_BUCKETS: ${{ secrets.STACK_BUCKETS }}
