name: CI

# On every pull request, but only on push to master
on:
  push:
    branches:
    - master
    tags:
    - '*'
    paths:
      # Only run test and docker publish if some code have changed
      - 'setup.py'
      - 'setup.cfg'
      - 'src/titiler/**'
      - '.pre-commit-config.yaml'
      - 'codecov.yml'
      - 'Dockerfile.*'
      - 'tox.ini'
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install codecov pre-commit

      - name: Test titiler.core
        run: |
          python -m pip install -e src/titiler/core["test"]
          python -m pytest src/titiler/core --cov=titiler.core --cov-report=xml --cov-append --cov-report=term-missing --ignore=venv

      - name: Test titiler.mosaic
        run: |
          python -m pip install -e src/titiler/mosaic["test"]
          python -m pytest src/titiler/mosaic --cov=titiler.mosaic --cov-report=xml --cov-append --cov-report=term-missing --ignore=venv

      - name: Test titiler.application
        run: |
          python -m pip install -e src/titiler/application["test"]
          python -m pytest src/titiler/application --cov=titiler.application --cov-report=xml --cov-append --cov-report=term-missing --ignore=venv

      - name: run pre-commit
        run: pre-commit run --all-files

      - name: Upload Results
        if: success()
        uses: codecov/codecov-action@v1
        with:
          files: ./coverage.xml
          flags: unittests
          name: ${{ matrix.platform }}-${{ matrix.tox-env }}
          fail_ci_if_error: false

  publish:
    needs: [tests]
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Set tag version
        id: tag
        # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Set module version
        id: module
        # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
        run: echo ::set-output name=version::$(python setup.py --version)

      - name: Build and publish
        if: steps.tag.outputs.tag == steps.module.outputs.version
        env:
          TOXENV: release
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          scripts/publish

  publish-docker:
    needs: [tests]
    if: github.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Login to Github
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set tag version
        id: tag
        # https://stackoverflow.com/questions/58177786/get-the-current-pushed-tag-in-github-actions
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      # Push `latest` when commiting to master
      - name: Build and push
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          # See https://github.com/developmentseed/titiler/discussions/387
          platforms: linux/amd64
          context: .
          file: Dockerfile.gunicorn
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest

      # Push `{VERSION}` when pushing a new tag
      - name: Build and push
        if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'
        uses: docker/build-push-action@v2
        with:
          # See https://github.com/developmentseed/titiler/discussions/387
          platforms: linux/amd64
          context: .
          file: Dockerfile.gunicorn
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}

  deploy:
    needs: [tests, publish]
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags') || github.event_name == 'release'

    defaults:
      run:
        working-directory: deployment/aws

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install cdk
        run: npm install -g

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      # Let's wait a bit to make sure package is available on pypi
      - name: Sleep for 60 seconds
        run: sleep 60s
        shell: bash

      # Build and Deploy CDK application
      - name: Build & Deploy
        run: npm run cdk deploy ${{ secrets.STACK_NAME }}-lambda-${{ secrets.STACK_STAGE }} --require-approval never
        env:
          TITILER_STACK_NAME: ${{ secrets.STACK_NAME }}
          TITILER_STACK_STAGE: ${{ secrets.STACK_STAGE }}
          TITILER_STACK_MEMORY: ${{ secrets.STACK_MEMORY }}
          TITILER_STACK_OWNER: ${{ secrets.STACK_OWNER }}
          TITILER_STACK_CLIENT: ${{ secrets.STACK_CLIENT }}
          TITILER_STACK_BUCKETS: ${{ secrets.STACK_BUCKETS }}
